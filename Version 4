import { useState, useEffect } from "react"
import axios from "axios"

// -------------------- MAIN APP --------------------
export default function App() {
  const [apiKey, setApiKey] = useState(import.meta.env.VITE_TMDB_KEY || "")
  const [movies, setMovies] = useState([])
  const [currentUser, setCurrentUser] = useState(null)
  const [users, setUsers] = useState([])
  const [reviews, setReviews] = useState([])
  const [selectedMovie, setSelectedMovie] = useState(null)
  const [movieDetails, setMovieDetails] = useState(null)
  const [cast, setCast] = useState([])

  // Load from localStorage
  useEffect(() => {
    const savedUsers = JSON.parse(localStorage.getItem("users") || "[]")
    const savedReviews = JSON.parse(localStorage.getItem("reviews") || "[]")
    const savedUser = JSON.parse(localStorage.getItem("currentUser") || "null")
    setUsers(savedUsers)
    setReviews(savedReviews)
    setCurrentUser(savedUser)
  }, [])

  // Save to localStorage
  useEffect(() => {
    localStorage.setItem("users", JSON.stringify(users))
  }, [users])
  useEffect(() => {
    localStorage.setItem("reviews", JSON.stringify(reviews))
  }, [reviews])
  useEffect(() => {
    localStorage.setItem("currentUser", JSON.stringify(currentUser))
  }, [currentUser])

  // Fetch trending movies
  useEffect(() => {
    if (apiKey) {
      axios
        .get(`https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`)
        .then((res) => setMovies(res.data.results))
        .catch((err) => console.error("TMDB fetch error:", err))
    }
  }, [apiKey])

  // Handle movie details + cast
  async function openMovie(movie) {
    setSelectedMovie(movie)
    try {
      const [detailsRes, creditsRes] = await Promise.all([
        axios.get(`https://api.themoviedb.org/3/movie/${movie.id}?api_key=${apiKey}`),
        axios.get(`https://api.themoviedb.org/3/movie/${movie.id}/credits?api_key=${apiKey}`),
      ])
      setMovieDetails(detailsRes.data)
      setCast(creditsRes.data.cast.slice(0, 6)) // top 6 cast
    } catch (err) {
      console.error("Movie details fetch error:", err)
    }
  }

  function closeModal() {
    setSelectedMovie(null)
    setMovieDetails(null)
    setCast([])
  }

  function handleRegister(username, password) {
    if (users.find((u) => u.username === username)) return "User already exists."
    const newUser = { username, password }
    setUsers([...users, newUser])
    setCurrentUser(newUser)
    return ""
  }

  function handleLogin(username, password) {
    const user = users.find((u) => u.username === username && u.password === password)
    if (!user) return "Invalid username or password."
    setCurrentUser(user)
    return ""
  }

  function handleLogout() {
    setCurrentUser(null)
  }

  function handleAddReview(movie, rating, text) {
    const newReview = { movieId: movie.id, user: currentUser.username, rating, text }
    setReviews([...reviews, newReview])
  }

  const appStyle = {
    backgroundColor: "#002a19",
    minHeight: "100vh",
    color: "#eafff1",
    padding: "20px",
    fontFamily: "Arial, sans-serif",
  }

  return (
    <div style={appStyle}>
      <h1 style={{ textAlign: "center" }}>üé¨ Film Review Website</h1>

      <AuthBox onRegister={handleRegister} onLogin={handleLogin} />
      {currentUser && (
        <div style={{ marginTop: 10, textAlign: "center" }}>
          Logged in as <strong>{currentUser.username}</strong>
          <button onClick={handleLogout} style={dangerButton}>Logout</button>
        </div>
      )}

      <hr style={{ borderColor: "rgba(255,255,255,0.06)", margin: "20px 0" }} />

      {apiKey ? (
        <>
          <h2>Trending Movies</h2>
          {movies.length ? (
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
                gap: 20,
              }}
            >
              {movies.map((movie) => (
                <div
                  key={movie.id}
                  style={{
                    background: "rgba(0,0,0,0.15)",
                    borderRadius: 12,
                    padding: 12,
                    textAlign: "center",
                    cursor: "pointer",
                    transition: "transform 0.2s",
                  }}
                  onClick={() => openMovie(movie)}
                  onMouseEnter={(e) => (e.currentTarget.style.transform = "scale(1.03)")}
                  onMouseLeave={(e) => (e.currentTarget.style.transform = "scale(1.0)")}
                >
                  <img
                    src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`}
                    alt={movie.title}
                    style={{ borderRadius: 8, width: "100%", height: "auto" }}
                  />
                  <h3 style={{ fontSize: 16, margin: "8px 0" }}>{movie.title}</h3>
                  <div style={{ fontSize: 13, opacity: 0.8 }}>
                    ‚≠ê {movie.vote_average.toFixed(1)} / 10
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div>Loading movies...</div>
          )}
        </>
      ) : (
        <div style={{ textAlign: "center" }}>
          <h4>Enter your TMDB API Key</h4>
          <input
            placeholder="Paste TMDB key here"
            value={apiKey}
            onChange={(e) => setApiKey(e.target.value)}
            style={inputStyle}
          />
          <div style={{ fontSize: 12, marginTop: 6 }}>Tip: store your key in .env for safety.</div>
        </div>
      )}

      <footer style={{ marginTop: 40, opacity: 0.8, fontSize: 13, textAlign: "center" }}>
        Demo app ‚Äî Data from TMDB. Reviews saved locally.
      </footer>

      {selectedMovie && (
        <MovieModal
          movie={movieDetails || selectedMovie}
          cast={cast}
          reviews={reviews.filter((r) => r.movieId === selectedMovie.id)}
          onClose={closeModal}
          onAdd={handleAddReview}
          currentUser={currentUser}
        />
      )}
    </div>
  )
}

// -------------------- COMPONENTS --------------------
function MovieModal({ movie, cast, onClose, reviews, onAdd, currentUser }) {
  if (!movie) return null
  return (
    <div style={modalOverlay}>
      <div style={modalContent}>
        <button style={closeButton} onClick={onClose}>‚úñ</button>
        <h2>{movie.title}</h2>
        <p style={{ opacity: 0.8 }}>{movie.overview}</p>
        {cast?.length > 0 && (
          <>
            <h4>Cast</h4>
            <div style={{ display: "flex", flexWrap: "wrap", gap: 10 }}>
              {cast.map((actor) => (
                <div key={actor.id} style={{ textAlign: "center" }}>
                  {actor.profile_path && (
                    <img
                      src={`https://image.tmdb.org/t/p/w185${actor.profile_path}`}
                      alt={actor.name}
                      style={{ width: 70, borderRadius: 8 }}
                    />
                  )}
                  <div style={{ fontSize: 13 }}>{actor.name}</div>
                </div>
              ))}
            </div>
          </>
        )}

        <hr style={{ margin: "15px 0" }} />
        <h4>Your Review</h4>
        <ReviewForm movie={movie} onAdd={onAdd} currentUser={currentUser} />
        <h4>All Reviews</h4>
        {reviews.length ? (
          reviews.map((r, i) => (
            <div key={i} style={{ fontSize: 14, marginBottom: 6 }}>
              <strong>{r.user}</strong>: {r.text} ‚Äî{" "}
              <span style={{ color: "#ffda6b" }}>
                {"‚òÖ".repeat(r.rating)}{"‚òÜ".repeat(5 - r.rating)}
              </span>
            </div>
          ))
        ) : (
          <div>No reviews yet.</div>
        )}
      </div>
    </div>
  )
}

// ---------- ReviewForm (with stars) ----------
function ReviewForm({ movie, onAdd, currentUser }) {
  const [rating, setRating] = useState(0)
  const [hover, setHover] = useState(null)
  const [text, setText] = useState("")
  const [msg, setMsg] = useState("")

  function submit(e) {
    e.preventDefault()
    setMsg("")
    if (!currentUser) { setMsg("Login to post reviews."); return }
    if (!text) { setMsg("Please write a short review."); return }
    if (rating === 0) { setMsg("Please select a rating."); return }
    onAdd(movie, rating, text)
    setText("")
    setRating(0)
    setMsg("Saved locally.")
  }

  const starStyle = (index) => ({
    cursor: "pointer",
    fontSize: "22px",
    color: (hover || rating) >= index ? "#ffda6b" : "#888",
    transition: "color 0.2s",
  })

  return (
    <form onSubmit={submit} style={{ marginTop: 6, display: "grid", gap: 8 }}>
      <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
        <label>Rating:</label>
        <div>
          {[1, 2, 3, 4, 5].map((i) => (
            <span
              key={i}
              style={starStyle(i)}
              onClick={() => setRating(i)}
              onMouseEnter={() => setHover(i)}
              onMouseLeave={() => setHover(null)}
            >
              ‚òÖ
            </span>
          ))}
        </div>
      </div>
      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        rows={3}
        placeholder="Write your review..."
        style={{ padding: 8, borderRadius: 8 }}
      />
      <div>
        <button type="submit" style={buttonStyle}>Post Review</button>
        {msg && <span style={{ marginLeft: 8 }}>{msg}</span>}
      </div>
    </form>
  )
}

// ---------- AuthBox ----------
function AuthBox({ onRegister, onLogin }) {
  const [mode, setMode] = useState("login")
  const [username, setUsername] = useState("")
  const [password, setPassword] = useState("")
  const [err, setErr] = useState("")

  function submit(e) {
    e.preventDefault()
    setErr("")
    const r = mode === "login" ? onLogin(username, password) : onRegister(username, password)
    if (r) setErr(r)
    else { setUsername(""); setPassword("") }
  }

  return (
    <form onSubmit={submit} style={{ display: "flex", gap: 8, alignItems: "center", flexWrap: "wrap", justifyContent: "center" }}>
      <input value={username} onChange={(e) => setUsername(e.target.value)} placeholder="username" style={inputStyle} />
      <input type="password" value={password} onChange={(e) => setPassword(e.target.value)} placeholder="password" style={inputStyle} />
      <button type="submit" style={buttonStyle}>{mode === "login" ? "Login" : "Register"}</button>
      <button type="button" onClick={() => setMode(mode === "login" ? "register" : "login")} style={mutedButton}>
        {mode === "login" ? "Switch to register" : "Switch to login"}
      </button>
      {err && <div style={{ color: "#ffc4c4", marginTop: 4 }}>{err}</div>}
    </form>
  )
}

// -------------------- STYLES --------------------
const inputStyle = {
  padding: "8px 10px",
  borderRadius: 8,
  border: "1px solid rgba(255,255,255,0.06)",
  background: "rgba(0,0,0,0.1)",
  color: "inherit",
}

const buttonStyle = {
  padding: "8px 10px",
  borderRadius: 8,
  border: "none",
  cursor: "pointer",
  background: "linear-gradient(180deg,#1b7a4f,#0e5c3a)",
  color: "#eafff1",
}

const mutedButton = {
  ...buttonStyle,
  background: "transparent",
  border: "1px solid rgba(255,255,255,0.06)",
  color: "#dfffe8",
}

const dangerButton = {
  ...buttonStyle,
  background: "linear-gradient(180deg,#7a1b1b,#5c0e0e)",
  marginLeft: 10,
}

const modalOverlay = {
  position: "fixed",
  top: 0,
  left: 0,
  width: "100%",
  height: "100%",
  background: "rgba(0,0,0,0.8)",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  zIndex: 999,
}

const modalContent = {
  background: "#01321e",
  padding: 20,
  borderRadius: 12,
  width: "90%",
  maxWidth: 600,
  color: "#eafff1",
  maxHeight: "90vh",
  overflowY: "auto",
  position: "relative",
}

const closeButton = {
  position: "absolute",
  top: 10,
  right: 10,
  background: "transparent",
  border: "none",
  color: "#eafff1",
  fontSize: 20,
  cursor: "pointer",
}
