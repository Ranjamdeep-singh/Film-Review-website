// ------------------ src/App.jsx ------------------
// Main application file for the Movie Review web app.
// Developed as part of an educational prototype integrating with The Movie Database (TMDB) API.
// This app demonstrates user authentication, data fetching, review storage, and responsive UI design.

import { useState, useEffect } from "react";
import axios from "axios";


// ---------- Main App Component ----------
export default function App() {
  // Load TMDB API key dynamically from .env for security and flexibility.
  const [apiKey, setApiKey] = useState(import.meta.env.VITE_TMDB_KEY || "");

  // Store movies fetched from the TMDB API.
  const [movies, setMovies] = useState([]);

  // Track the currently logged-in user (null if not logged in).
  const [currentUser, setCurrentUser] = useState(null);

  // Basic in-memory user list (no persistence for simplicity in this prototype).
  const [users, setUsers] = useState([]);

  // Store local reviews linked to users and movies (temporary memory storage).
  const [reviews, setReviews] = useState([]);

  // Each user‚Äôs watchlist is stored as username ‚Üí array of movies.
  const [watchlist, setWatchlist] = useState({});

  // The currently selected movie, shown in a detailed modal.
  const [selectedMovie, setSelectedMovie] = useState(null);

  // Full movie data fetched separately for the modal view.
  const [movieDetails, setMovieDetails] = useState(null);

  // Track current search text input by the user.
  const [searchQuery, setSearchQuery] = useState("");


  // ---------- Fetch movies from TMDB ----------
  // Triggered automatically when the API key or search query changes.
  // Ensures that the displayed movies are always up to date with the latest user input.
  useEffect(() => {
    if (!apiKey) return; // Skip API calls if the key is missing.

    // Use trending movies when no query, otherwise search with the user‚Äôs input.
    const fetchUrl = searchQuery
      ? `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${encodeURIComponent(searchQuery)}`
      : `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`;

    // Fetch movie data and handle it safely.
    axios
      .get(fetchUrl)
      .then((res) => setMovies(res.data.results))
      .catch((err) => console.error("TMDB fetch error:", err));
  }, [apiKey, searchQuery]);


  // ---------- Fetch full details for selected movie ----------
  // Retrieves cast and detailed metadata when a movie is clicked and opened in a modal.
  useEffect(() => {
    if (selectedMovie && apiKey) {
      axios
        .get(
          `https://api.themoviedb.org/3/movie/${selectedMovie.id}?api_key=${apiKey}&append_to_response=credits`
        )
        .then((res) => setMovieDetails(res.data))
        .catch((err) => console.error("TMDB details error:", err));
    }
  }, [selectedMovie, apiKey]);


  // ---------- User Management ----------
  // Register a new account (temporary, local user storage).
  function handleRegister(username, password) {
    if (users.find((u) => u.username === username))
      return "User already exists.";
    const newUser = { username, password };
    setUsers([...users, newUser]);
    setCurrentUser(newUser); // Log in automatically after registering.
    return "";
  }

  // Authenticate existing users (simple password match for prototype).
  function handleLogin(username, password) {
    const user = users.find((u) => u.username === username && u.password === password);
    if (!user) return "Invalid username or password.";
    setCurrentUser(user);
    return "";
  }

  // Log out the user and clear session state (removes watchlist/review permissions).
  function handleLogout() {
    setCurrentUser(null);
  }


  // ---------- Review Management ----------
  // Add a local review linked to a specific user and movie.
  // Stored only in-memory; demonstrates basic CRUD logic that could be expanded with backend.
  function handleAddReview(movie, rating, text) {
    const newReview = { movieId: movie.id, user: currentUser.username, rating, text };
    setReviews([...reviews, newReview]);
  }


  // ---------- Watchlist Management ----------
  // Toggle a movie in/out of the current user's personal watchlist.
  // Simulates user-specific saved data without connecting to a database.
  function handleToggleWatchlist(movie) {
    if (!currentUser) return; // Prevents guest modification.
    setWatchlist((prev) => {
      const userList = prev[currentUser.username] || [];
      const exists = userList.find((m) => m.id === movie.id);
      const updatedList = exists
        ? userList.filter((m) => m.id !== movie.id)
        : [...userList, movie];
      return { ...prev, [currentUser.username]: updatedList };
    });
  }


  // Close movie modal and clear selected state.
  function handleCloseModal() {
    setSelectedMovie(null);
    setMovieDetails(null);
  }


  // ---------- UI Styling ----------
  // Inline styles used for visual consistency and readability.
  // Ideally moved to external CSS for scalability and performance optimization.
  const styles = {
    app: {
      backgroundColor: "#003d24", // Chosen dark tone for cinematic contrast.
      minHeight: "100vh",
      color: "#eafff1",
      padding: 20,
      fontFamily: "Arial, sans-serif",
      boxSizing: "border-box",
    },
    button: {
      padding: "8px 10px",
      borderRadius: 8,
      border: "none",
      cursor: "pointer",
      background: "linear-gradient(180deg,#1b7a4f,#0e5c3a)",
      color: "#eafff1",
    },
    mutedButton: {
      padding: "8px 10px",
      borderRadius: 8,
      border: "1px solid rgba(255,255,255,0.06)",
      color: "#dfffe8",
      background: "transparent",
      cursor: "pointer",
      marginLeft: 6,
    },
    dangerButton: {
      padding: "8px 10px",
      borderRadius: 8,
      cursor: "pointer",
      background: "linear-gradient(180deg,#7a1b1b,#5c0e0e)",
      color: "#eafff1",
      marginLeft: 10,
    },
    input: {
      padding: "8px 10px",
      borderRadius: 8,
      border: "1px solid rgba(255,255,255,0.06)",
      background: "rgba(0,0,0,0.06)",
      color: "inherit",
      flex: 1,
    },
  };


  // ---------- UI Layout ----------
  return (
    <div style={styles.app}>
      <h1>üé¨ Film Review Website</h1>

      {/* Authentication form and login/register toggles */}
      <AuthBox onRegister={handleRegister} onLogin={handleLogin} styles={styles} />

      {/* Show username and logout if logged in */}
      {currentUser && (
        <div style={{ marginTop: 10 }}>
          Logged in as <strong>{currentUser.username}</strong>
          <button onClick={handleLogout} style={styles.dangerButton}>Logout</button>
        </div>
      )}

      {/* Search input with TMDB query */}
      <div style={{ display: "flex", gap: 6, margin: "16px 0" }}>
        <input
          type="text"
          placeholder="Search movies..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          style={styles.input}
        />
        <button style={styles.button}>Search</button>
      </div>

      {/* Conditionally show trending or search results */}
      <h2>{searchQuery ? "Search Results" : "Trending Movies"}</h2>

      {/* Movie grid display */}
      {apiKey ? (
        movies.length ? (
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "repeat(auto-fit, minmax(180px, 1fr))",
              gap: 16,
            }}
          >
            {movies.map((movie) => (
              <div key={movie.id} style={{ background: "rgba(0,0,0,0.15)", borderRadius: 12, padding: 12 }}>
                {/* Movie Poster */}
                <img
                  src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}
                  alt={movie.title}
                  style={{ borderRadius: 8, width: "100%", cursor: "pointer" }}
                  onClick={() => setSelectedMovie(movie)} // Opens detailed modal
                />
                <h3 style={{ fontSize: 16, margin: "8px 0" }}>{movie.title}</h3>

                {/* Review component shown below each movie */}
                <ReviewForm
                  movie={movie}
                  onAdd={handleAddReview}
                  currentUser={currentUser}
                  styles={styles}
                />

                {/* Display existing reviews */}
                <div style={{ marginTop: 6 }}>
                  {reviews
                    .filter((r) => r.movieId === movie.id)
                    .map((r, i) => (
                      <div key={i} style={{ fontSize: 13, borderTop: "1px solid rgba(255,255,255,0.08)", marginTop: 4, paddingTop: 4 }}>
                        <strong>{r.user}</strong>: {r.text} ({r.rating}/5 ‚≠ê)
                      </div>
                    ))}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div>Loading movies...</div>
        )
      ) : (
        <div>
          <h4>Enter your TMDB API Key</h4>
          <input
            placeholder="Paste TMDB key here"
            value={apiKey}
            onChange={(e) => setApiKey(e.target.value)}
            style={styles.input}
          />
          <div style={{ fontSize: 12, marginTop: 6 }}>Tip: store your key in .env for safety.</div>
        </div>
      )}

      {/* Footer message */}
      <footer style={{ marginTop: 40, opacity: 0.8, fontSize: 13 }}>
        Demo app ‚Äî Data from TMDB. Auth, reviews, and watchlists stored locally for demonstration purposes.
      </footer>
    </div>
  );
}


// ---------- AuthBox Component ----------
// Handles login/register switching and basic user input validation.
function AuthBox({ onRegister, onLogin, styles }) {
  const [mode, setMode] = useState("login");
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [err, setErr] = useState("");

  function submit(e) {
    e.preventDefault();
    setErr("");
    const result = mode === "login" ? onLogin(username, password) : onRegister(username, password);
    if (result) setErr(result);
    else {
      setUsername("");
      setPassword("");
    }
  }

  return (
    <form onSubmit={submit} style={{ display: "flex", gap: 8, alignItems: "center", flexWrap: "wrap" }}>
      <input
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="username"
        style={{ ...styles.input, width: 120 }}
      />
      <input
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="password"
        style={{ ...styles.input, width: 120 }}
      />
      <button type="submit" style={styles.button}>
        {mode === "login" ? "Login" : "Register"}
      </button>
      <button
        type="button"
        onClick={() => setMode(mode === "login" ? "register" : "login")}
        style={styles.mutedButton}
      >
        {mode === "login" ? "Switch to register" : "Switch to login"}
      </button>
      {err && <div style={{ color: "#ffc4c4", marginTop: 4 }}>{err}</div>}
    </form>
  );
}


// ---------- ReviewForm Component ----------
// Form for users to rate and write short reviews on individual movies.
// Demonstrates controlled inputs and validation feedback.
function ReviewForm({ movie, onAdd, currentUser, styles }) {
  const [rating, setRating] = useState(0);
  const [hover, setHover] = useState(null);
  const [text, setText] = useState("");
  const [msg, setMsg] = useState("");

  function submit(e) {
    e.preventDefault();
    setMsg("");
    if (!currentUser) {
      setMsg("Login to post reviews.");
      return;
    }
    if (!text) {
      setMsg("Please write a short review.");
      return;
    }
    if (rating === 0) {
      setMsg("Please select a rating.");
      return;
    }
    onAdd(movie, rating, text);
    setText("");
    setRating(0);
    setMsg("Saved locally.");
  }

  const starStyle = (index) => ({
    cursor: "pointer",
    fontSize: "22px",
    color: (hover || rating) >= index ? "#ffda6b" : "#888",
    transition: "color 0.2s",
  });

  return (
    <form onSubmit={submit} style={{ marginTop: 6, display: "grid", gap: 8 }}>
      <div style={{ display: "flex", alignItems: "center", gap: 8 }}>
        <label style={{ minWidth: 60 }}>Rating</label>
        <div>
          {[1, 2, 3, 4, 5].map((i) => (
            <span
              key={i}
              style={starStyle(i)}
              onClick={() => setRating(i)}
              onMouseEnter={() => setHover(i)}
              onMouseLeave={() => setHover(null)}
            >
              ‚òÖ
            </span>
          ))}
        </div>
        <div style={{ fontSize: 12, opacity: 0.8 }}>
          {currentUser ? `Posting as ${currentUser.username}` : "Log in to post"}
        </div>
      </div>

      <textarea
        value={text}
        onChange={(e) => setText(e.target.value)}
        rows={4}
        placeholder="Write your review..."
        style={{ padding: 8, borderRadius: 8 }}
      />
      <div>
        <button type="submit" style={styles.button}>Post review</button>
        {msg && <span style={{ marginLeft: 8 }}>{msg}</span>}
      </div>
    </form>
  );
}
